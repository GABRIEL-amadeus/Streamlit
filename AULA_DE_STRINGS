O que √© strings em python
Uma string √© uma sequ√™ncia de caracteres. Em outras palavras, √© qualquer conjunto de letras, n√∫meros, s√≠mbolos ou espa√ßos que estejam entre aspas.
Exemplo:
frase = "Python √© divertido!"


Essa vari√°vel frase agora guarda uma string com o texto "Python √© divertido!".

Como criar strings
Voc√™ pode criar strings com:
Aspas simples:
nome = 'Ana'


Aspas duplas:
nome = "Ana"


Aspas triplas (para textos de v√°rias linhas):
poema = '''Rosas s√£o vermelhas,
Violetas s√£o azuis.'''



Strings s√£o como listas de caracteres
Cada letra (ou caractere) tem uma posi√ß√£o (√≠ndice). Por exemplo:
palavra = "Python"


As posi√ß√µes s√£o assim:
Letra
P
y
t
h
o
n
√çndice
0
1
2
3
4
5

Voc√™ pode acessar letras usando colchetes:
print(palavra[0])  # Resultado: 'P'
print(palavra[-1]) # Resultado: 'n' (√∫ltima letra)


 Algumas opera√ß√µes √∫teis com strings:
Opera√ß√£o
Exemplo
Resultado
Concatenar (juntar)
"Ol√° " + "mundo"
"Ol√° mundo"
Repetir
"ha" * 3
"hahaha"
Ver tamanho da string
len("Python")
6
Trocar parte do texto
"Python".replace("P", "J")
"Jython"
Deixar tudo min√∫sculo
"Python".lower()
"python"
Deixar tudo mai√∫sculo
"Python".upper()
"PYTHON"
Remover espa√ßos do come√ßo/fim
" oi ".strip()
"oi"
Ver se come√ßa com algo
"Python".startswith("Py")
True
Ver se termina com algo
"arquivo.txt".endswith(".txt"
True



Exemplo completo:
mensagem = " Ol√°, Mundo! "
print(mensagem.strip().upper())  # Resultado: 'OL√Å, MUNDO!'


Aqui, usamos .strip() para remover os espa√ßos e .upper() para deixar tudo em mai√∫sculo.


Semelhan√ßas entre string e lista
Tanto as strings quanto as listas:
‚úÖ T√™m √≠ndices (come√ßando do 0)
 ‚úÖ Permitem fatiamento (slicing)
 ‚úÖ Podem ser percorridas com loops
 ‚úÖ Possuem comprimento com len()
 Exemplo comparando:
texto = "Python"
lista = ['P', 'y', 't', 'h', 'o', 'n']

print(texto[1])  # Resultado: y
print(lista[1])  # Resultado: y

print(len(texto))  # Resultado: 6
print(len(lista))  # Resultado: 6



 2. Diferen√ßa importante: imutabilidade
Strings s√£o imut√°veis: voc√™ n√£o pode mudar um caractere diretamente.
Listas s√£o mut√°veis: voc√™ pode alterar qualquer item.
Exemplo:
# Isso d√° erro!
texto = "Python"
# texto[0] = "J"  ‚ùå Erro

# Isso funciona
lista = ['P', 'y', 't', 'h', 'o', 'n']
lista[0] = 'J'   # ‚úÖ
print(lista)     # ['J', 'y', 't', 'h', 'o', 'n']






 3. Converter entre string e lista
De string para lista:
texto = "banana"
lista = list(texto)
print(lista)  # ['b', 'a', 'n', 'a', 'n', 'a']


De lista para string:
lista = ['b', 'o', 'l', 'o']
texto = ''.join(lista)
print(texto)  # bolo


Voc√™ tamb√©m pode colocar algo entre os caracteres:
letras = ['a', 'b', 'c']
print('-'.join(letras))  # a-b-c



üéØ Resumindo:
Caracter√≠stica
String
Lista
√çndice
‚úÖ
‚úÖ
Fatiamento
‚úÖ
‚úÖ
Imut√°vel
‚úÖ (n√£o muda)
‚ùå (pode mudar)
Pode usar len()
‚úÖ
‚úÖ
Convers√≠vel entre si
‚úÖ
‚úÖ



O que √© ‚Äúlen()‚Äù:
 len() √© uma fun√ß√£o embutida  do Python que serve para contar o tamanho de algo ‚Äî ou seja, quantos elementos tem dentro de uma estrutura como uma string, uma lista, uma tupla, um dicion√°rio, etc.
Exemplos com diferentes tipos:
 String (conta caracteres):
frase = "Python"
print(len(frase))  # Resultado: 6


 Lista (conta itens):
numeros = [1, 2, 3, 4, 5]
print(len(numeros))  # Resultado: 5


 Tupla:
cores = ('azul', 'verde', 'vermelho')
print(len(cores))  # Resultado: 3
Dica:
Mesmo espa√ßos contam em uma string:
print(len(s))  # Resultado: 5  (O, i, espa√ßo, :, ))

Operador + (concatena√ß√£o)
Ele serve para juntar (concatenar) duas ou mais strings.
 Exemplo:
nome = "Maria"
sobrenome = "Silva"

completo = nome + " " + sobrenome
print(completo)  # Resultado: Maria Silva


‚ö†Ô∏è Importante: s√≥ d√° pra somar strings com strings ‚Äî n√£o pode misturar com n√∫meros direto.
idade = 20
# print("Tenho " + idade + " anos")  ‚ùå Isso d√° erro

# Solu√ß√£o:
print("Tenho " + str(idade) + " anos")  ‚úÖ



Ô∏è Operador * (repeti√ß√£o)
Ele serve para repetir uma string v√°rias vezes.
 Exemplo:
print("ha" * 3)  # Resultado: hahaha



Outro exemplo:
linha = "-" * 30
print(linha)
# Resultado: ------------------------------



 Combina√ß√£o dos dois:

print(("Oi! " + "Tudo bem? ") * 2)


Resultado:
Oi! Tudo bem? Oi! Tudo bem?



 Aten√ß√£o: n√£o funciona assim
# print("Oi" + 3)     ‚ùå erro
# print("Oi" * "3")   ‚ùå erro


Tem que ser string + string ou string * n√∫mero inteiro.

Grafico ja mostrado anteriormente sobre:
Algumas opera√ß√µes √∫teis com strings:
Opera√ß√£o
Exemplo
Resultado
Concatenar (juntar)
"Ol√° " + "mundo"
"Ol√° mundo"
Repetir
"ha" * 3
"hahaha"
Ver tamanho da string
len("Python")
6
Trocar parte do texto
"Python".replace("P", "J")
"Jython"
Deixar tudo min√∫sculo
"Python".lower()
"python"
Deixar tudo mai√∫sculo
"Python".upper()
"PYTHON"
Remover espa√ßos do come√ßo/fim
" oi ".strip()
"oi"
Ver se come√ßa com algo
"Python".startswith("Py")
True
Ver se termina com algo
"arquivo.txt".endswith(".txt"
True


Percorrendo uma string com for e in
A estrutura b√°sica √©:
python
Copiar c√≥digo
for letra in minha_string:
    # fa√ßa algo com a letra


Aqui, a vari√°vel letra vai assumir um caractere por vez da string.
Exemplo simples:
nome = "Ana"

for letra in nome:
    print(letra)


Sa√≠da:
A
n
a
Exibir a posi√ß√£o de cada letra:
palavra = "Python"

for i in range(len(palavra)):
    print(f"Letra {i}: {palavra[i]}")


Sa√≠da:
Letra 0: P
Letra 1: y
Letra 2: t
Letra 3: h
Letra 4: o
Letra 5: n

Principais fun√ß√µes/m√©todos de string
1. .upper()
 Deixa tudo em MAI√öSCULO
nome = "ana"
print(nome.upper())  # ANA



2. .lower()
 Deixa tudo em min√∫sculo
texto = "OL√Å"
print(texto.lower())  # ol√°



3. .capitalize()
 Deixa s√≥ a primeira letra mai√∫scula
frase = "python √© legal"
print(frase.capitalize())  # Python √© legal



4. .title()
 Deixa a primeira letra de cada palavra mai√∫scula
titulo = "aprendendo python com strings"
print(titulo.title())  # Aprendendo Python Com Strings



5. .strip()
 Remove espa√ßos do come√ßo e do fim
mensagem = "  oi  "
print(mensagem.strip())  # oi


Tem tamb√©m:
.lstrip() ‚Üí remove s√≥ da esquerda
.rstrip() ‚Üí remove s√≥ da direita

6. .replace(antigo, novo)
 Troca partes do texto
frase = "gato √© legal"
print(frase.replace("gato", "cachorro"))  # cachorro √© legal



7. .find(palavra)
 Retorna o √≠ndice onde a palavra come√ßa
texto = "banana"
print(texto.find("na"))  # 2


Se n√£o encontrar, retorna -1.

8. .count(palavra)
 Conta quantas vezes aparece
print("banana".count("a"))  # 3



9. .startswith() e .endswith()
Verifica se come√ßa ou termina com algo
nome = "ana maria"
print(nome.startswith("ana"))   # True
print(nome.endswith("maria"))   # True



10. .split()
 Divide a string em uma lista de palavras
frase = "eu amo python"
palavras = frase.split()
print(palavras)  # ['eu', 'amo', 'python']



11. .join()
Junta elementos de uma lista em uma string s√≥
palavras = ['a', 'b', 'c']
print('-'.join(palavras))  # a-b-c
Sintaxe do slicing
nova_string = string[in√≠cio:fim:passo]


in√≠cio: onde come√ßa o corte (inclusivo)
fim: onde termina o corte (exclusivo)
passo: de quantos em quantos voc√™ quer pular (opcional)
Exemplos pr√°ticos
texto = "Python"
Do in√≠cio at√© um ponto:
print(texto[0:3])  # 'Pyt'


 Do meio at√© o fim:
print(texto[2:])  # 'thon'


 Do in√≠cio at√© um ponto (sem come√ßo):
print(texto[:4])  # 'Pyth'


 String inteira:
print(texto[:])  # 'Python'


 Pulando letras:
print(texto[::2])  # 'Pto' (vai de 2 em 2)


 Ao contr√°rio:
print(texto[::-1])  # 'nohtyP' (string invertida)



